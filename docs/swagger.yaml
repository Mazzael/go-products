basePath: /
definitions:
  dto.CreateUserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.UserLoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.UserLoginOutput:
    properties:
      access_token:
        type: string
    type: object
  handlers.Error:
    properties:
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: vtrujillomazza@gmail.com
    name: Vinicius Trujillo Mazza
  description: Product API with auhtentication
  title: Go API Example
  version: "1.0"
paths:
  /users:
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Error'
      summary: Create user
      tags:
      - users
  /users/auth:
    post:
      consumes:
      - application/json
      description: User login
      parameters:
      - description: user credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserLoginOutput'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Error'
      summary: User login
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
